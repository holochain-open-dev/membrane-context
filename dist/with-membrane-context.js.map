{"version":3,"file":"with-membrane-context.js","sourceRoot":"","sources":["../src/with-membrane-context.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,WAAW,EAAE,MAAM,YAAY,CAAC;AAQzC,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,SAAY,EACiD,EAAE,CAC9D,KAAM,SAAQ,WAAW,CAAC,SAAS,CAAC;IACnC,MAAM,KAAK,gBAAgB;QACzB,OAAO,CAAC,UAAU,CAAC,CAAC;IACtB,CAAC;CACyE,CAAC","sourcesContent":["import { AdminWebsocket, AppWebsocket, CellId } from '@holochain/conductor-api';\nimport { Constructor } from 'lit-element';\nimport { withContext } from 'wc-context';\n\nexport interface MembraneContext {\n  cellId: CellId;\n  appWebsocket: AppWebsocket;\n  adminWebsocket: AdminWebsocket;\n}\n\nexport const withMembraneContext = <T extends Constructor<HTMLElement>>(\n  baseClass: T\n): T & Constructor<{ context: { membrane: MembraneContext } }> =>\n  (class extends withContext(baseClass) {\n    static get observedContexts() {\n      return ['membrane'];\n    }\n  } as unknown) as T & Constructor<{ context: { membrane: MembraneContext } }>;\n"]}