{"version":3,"file":"with-membrane-context.js","sourceRoot":"","sources":["../src/with-membrane-context.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,WAAW,EAAE,MAAM,YAAY,CAAC;AAQzC,MAAM,kBAAkB,GAAG,CACzB,SAAY,EACiD,EAAE,CAC9D,KAAM,SAAQ,WAAW,CAAC,SAAS,CAAC;IACnC,MAAM,KAAK,gBAAgB;QACzB,OAAO,CAAC,UAAU,CAAC,CAAC;IACtB,CAAC;CACyE,CAAC;AAE/E,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,SAAY,EAOT,EAAE;IACL,MAAM,sBAAuB,SAAQ,kBAAkB,CAAC,SAAS,CAAC;QAGhE,IAAI,MAAM,CAAC,KAAa;YACtB,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3C,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACvB,CAAC;QAED,IAAI,MAAM;YACR,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;QACpE,CAAC;QAGD,IAAI,YAAY,CAAC,KAAmB;YAClC,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YACvD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC7B,CAAC;QAED,IAAI,YAAY;YACd,OAAO,IAAI,CAAC,aAAa;gBACvB,CAAC,CAAC,IAAI,CAAC,aAAa;gBACpB,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC;QACzC,CAAC;QAGD,IAAI,cAAc,CAAC,KAAqB;YACtC,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;YAC3D,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC/B,CAAC;QAED,IAAI,cAAc;YAChB,OAAO,IAAI,CAAC,eAAe;gBACzB,CAAC,CAAC,IAAI,CAAC,eAAe;gBACtB,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC;QAC3C,CAAC;KACF;IACD,OAAO,sBAAsB,CAAC;AAChC,CAAC,CAAC","sourcesContent":["import { AdminWebsocket, AppWebsocket, CellId } from '@holochain/conductor-api';\nimport { Constructor, LitElement, property } from 'lit-element';\nimport { withContext } from 'wc-context';\n\nexport interface MembraneContext {\n  cellId: CellId;\n  appWebsocket: AppWebsocket;\n  adminWebsocket: AdminWebsocket;\n}\n\nconst membraneContextRaw = <T extends Constructor<HTMLElement>>(\n  baseClass: T\n): T & Constructor<{ context: { membrane: MembraneContext } }> =>\n  (class extends withContext(baseClass) {\n    static get observedContexts() {\n      return ['membrane'];\n    }\n  } as unknown) as T & Constructor<{ context: { membrane: MembraneContext } }>;\n\nexport const membraneContext = <T extends Constructor<LitElement>>(\n  baseClass: T\n): T &\n  Constructor<{\n    context: { membrane: MembraneContext };\n    cellId: CellId;\n    appWebsocket: AppWebsocket;\n    adminWebsocket: AdminWebsocket;\n  }> => {\n  class MembraneContextElement extends membraneContextRaw(baseClass) {\n    private _cellId!: CellId;\n\n    set cellId(value: CellId) {\n      this.requestUpdate('cellId', this._cellId);\n      this._cellId = value;\n    }\n\n    get cellId() {\n      return this._cellId ? this._cellId : this.context.membrane.cellId;\n    }\n\n    private _appWebsocket!: AppWebsocket;\n    set appWebsocket(value: AppWebsocket) {\n      this.requestUpdate('appWebsocket', this._appWebsocket);\n      this._appWebsocket = value;\n    }\n\n    get appWebsocket() {\n      return this._appWebsocket\n        ? this._appWebsocket\n        : this.context.membrane.appWebsocket;\n    }\n\n    private _adminWebsocket!: AdminWebsocket;\n    set adminWebsocket(value: AdminWebsocket) {\n      this.requestUpdate('adminWebsocket', this._adminWebsocket);\n      this._adminWebsocket = value;\n    }\n\n    get adminWebsocket() {\n      return this._adminWebsocket\n        ? this._adminWebsocket\n        : this.context.membrane.adminWebsocket;\n    }\n  }\n  return MembraneContextElement;\n};\n"]}