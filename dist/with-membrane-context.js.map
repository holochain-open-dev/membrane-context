{"version":3,"file":"with-membrane-context.js","sourceRoot":"","sources":["../src/with-membrane-context.ts"],"names":[],"mappings":";AACA,OAAO,EAA2B,QAAQ,EAAE,MAAM,aAAa,CAAC;AAChE,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAQpD,MAAM,kBAAkB,GAAG,CACzB,SAAY,EACoD,EAAE,CACjE,KAAM,SAAQ,aAAa,CAAC,SAAS,CAAC;IACrC,MAAM,KAAK,MAAM;QACf,OAAO,CAAC,0BAA0B,CAAC,CAAC;IACtC,CAAC;CAEyD,CAAC;AAE/D,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,SAAY,EACsB,EAAE;IACpC,MAAM,sBAAuB,SAAQ,kBAAkB,CAAC,SAAS,CAAC;QAAlE;;YA4BU,oBAAe,GAA+B,SAAS,CAAC;QAYlE,CAAC;QAnCC,IAAI,MAAM,CAAC,KAAa;YACtB,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;YAC1B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACvC,CAAC;QAED,IAAI,MAAM;YACR,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC;QAC5E,CAAC;QAGD,IAAI,YAAY,CAAC,KAAmB;YAClC,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;YAChC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;YAC3B,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC;QAED,IAAI,YAAY;YACd,OAAO,IAAI,CAAC,aAAa;gBACvB,CAAC,CAAC,IAAI,CAAC,aAAa;gBACpB,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC;QACjD,CAAC;QAGD,IAAI,cAAc,CAAC,KAAiC;YAClD,IAAI,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC;YAClC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YAC7B,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;QAC/C,CAAC;QAED,IAAI,cAAc;YAChB,OAAO,IAAI,CAAC,eAAe;gBACzB,CAAC,CAAC,IAAI,CAAC,eAAe;gBACtB,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,cAAc,CAAC;QACnD,CAAC;KACF;IAtCC;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;4EACgB;IAuC7C,OAAO,sBAAsB,CAAC;AAChC,CAAC,CAAC","sourcesContent":["import { AdminWebsocket, AppWebsocket, CellId } from '@holochain/conductor-api';\nimport { Constructor, LitElement, property } from 'lit-element';\nimport { ConsumerMixin } from 'lit-element-context';\n\nexport interface MembraneContext {\n  cellId: CellId;\n  appWebsocket: AppWebsocket;\n  adminWebsocket?: AdminWebsocket;\n}\n\nconst membraneContextRaw = <T extends Constructor<HTMLElement>>(\n  baseClass: T\n): T & Constructor<{ holochainMembraneContext: MembraneContext }> =>\n  (class extends ConsumerMixin(baseClass) {\n    static get inject() {\n      return ['holochainMembraneContext'];\n    }\n  } as unknown) as T &\n    Constructor<{ holochainMembraneContext: MembraneContext }>;\n\nexport const membraneContext = <T extends Constructor<LitElement>>(\n  baseClass: T\n): T & Constructor<MembraneContext> => {\n  class MembraneContextElement extends membraneContextRaw(baseClass) {\n    @property({ type: Object })\n    holochainMembraneContext!: MembraneContext;\n\n    private _cellId!: CellId;\n    set cellId(value: CellId) {\n      let oldVal = this._cellId;\n      this._cellId = value;\n      this.requestUpdate('cellId', oldVal);\n    }\n\n    get cellId() {\n      return this._cellId ? this._cellId : this.holochainMembraneContext.cellId;\n    }\n\n    private _appWebsocket!: AppWebsocket;\n    set appWebsocket(value: AppWebsocket) {\n      let oldVal = this._appWebsocket;\n      this._appWebsocket = value;\n      this.requestUpdate('appWebsocket', oldVal);\n    }\n\n    get appWebsocket() {\n      return this._appWebsocket\n        ? this._appWebsocket\n        : this.holochainMembraneContext.appWebsocket;\n    }\n\n    private _adminWebsocket: AdminWebsocket | undefined = undefined;\n    set adminWebsocket(value: AdminWebsocket | undefined) {\n      let oldVal = this._adminWebsocket;\n      this._adminWebsocket = value;\n      this.requestUpdate('adminWebsocket', oldVal);\n    }\n\n    get adminWebsocket(): AdminWebsocket | undefined {\n      return this._adminWebsocket\n        ? this._adminWebsocket\n        : this.holochainMembraneContext.adminWebsocket;\n    }\n  }\n  return MembraneContextElement;\n};\n"]}